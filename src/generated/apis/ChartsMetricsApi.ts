/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  OverviewMetrics,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    OverviewMetricsFromJSON,
    OverviewMetricsToJSON,
} from '../models/index';

export interface GetOverviewMetricsRequest {
    projectId: string;
    currency?: GetOverviewMetricsCurrencyEnum;
}

/**
 * 
 */
export class ChartsMetricsApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): <code>charts_metrics:overview:read</code>.
     * Get overview metrics for a project
     */
    async getOverviewMetricsRaw(requestParameters: GetOverviewMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverviewMetrics>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getOverviewMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/metrics/overview`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverviewMetricsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>charts_metrics:overview:read</code>.
     * Get overview metrics for a project
     */
    async getOverviewMetrics(requestParameters: GetOverviewMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverviewMetrics> {
        const response = await this.getOverviewMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOverviewMetricsCurrencyEnum = {
    Usd: 'USD',
    Eur: 'EUR',
    Gbp: 'GBP',
    Aud: 'AUD',
    Cad: 'CAD',
    Jpy: 'JPY',
    Brl: 'BRL',
    Krw: 'KRW',
    Cny: 'CNY',
    Mxn: 'MXN',
    Sek: 'SEK',
    Pln: 'PLN'
} as const;
export type GetOverviewMetricsCurrencyEnum = typeof GetOverviewMetricsCurrencyEnum[keyof typeof GetOverviewMetricsCurrencyEnum];
