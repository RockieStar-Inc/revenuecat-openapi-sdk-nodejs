/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  App,
  AppCreate,
  DeletedObject,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListApps,
  ListPublicApiKeys,
  StoreKitConfigFile,
  UpdateAppRequest,
} from '../models/index';
import {
    AppFromJSON,
    AppToJSON,
    AppCreateFromJSON,
    AppCreateToJSON,
    DeletedObjectFromJSON,
    DeletedObjectToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListAppsFromJSON,
    ListAppsToJSON,
    ListPublicApiKeysFromJSON,
    ListPublicApiKeysToJSON,
    StoreKitConfigFileFromJSON,
    StoreKitConfigFileToJSON,
    UpdateAppRequestFromJSON,
    UpdateAppRequestToJSON,
} from '../models/index';

export interface CreateAppRequest {
    projectId: string;
    appCreate: AppCreate;
}

export interface DeleteAppRequest {
    projectId: string;
    appId: string;
}

export interface GetAppRequest {
    projectId: string;
    appId: string;
}

export interface GetAppStorekitConfigRequest {
    projectId: string;
    appId: string;
}

export interface ListAppPublicApiKeysRequest {
    projectId: string;
    appId: string;
}

export interface ListAppsRequest {
    projectId: string;
    startingAfter?: string;
    limit?: number;
}

export interface UpdateAppOperationRequest {
    projectId: string;
    appId: string;
    updateAppRequest: UpdateAppRequest;
}

/**
 * 
 */
export class AppApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Create an App
     */
    async createAppRaw(requestParameters: CreateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createApp().'
            );
        }

        if (requestParameters['appCreate'] == null) {
            throw new runtime.RequiredError(
                'appCreate',
                'Required parameter "appCreate" was null or undefined when calling createApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppCreateToJSON(requestParameters['appCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Create an App
     */
    async createApp(requestParameters: CreateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App> {
        const response = await this.createAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Delete an app
     */
    async deleteAppRaw(requestParameters: DeleteAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedObject>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteApp().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling deleteApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps/{app_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedObjectFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Delete an app
     */
    async deleteApp(requestParameters: DeleteAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedObject> {
        const response = await this.deleteAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get an app
     */
    async getAppRaw(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getApp().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps/{app_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get an app
     */
    async getApp(requestParameters: GetAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App> {
        const response = await this.getAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get the StoreKit configuration for an app
     */
    async getAppStorekitConfigRaw(requestParameters: GetAppStorekitConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreKitConfigFile>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAppStorekitConfig().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling getAppStorekitConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps/{app_id}/store_kit_config`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreKitConfigFileFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get the StoreKit configuration for an app
     */
    async getAppStorekitConfig(requestParameters: GetAppStorekitConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreKitConfigFile> {
        const response = await this.getAppStorekitConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get a list of the public API keys of an app
     */
    async listAppPublicApiKeysRaw(requestParameters: ListAppPublicApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPublicApiKeys>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listAppPublicApiKeys().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling listAppPublicApiKeys().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps/{app_id}/public_api_keys`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPublicApiKeysFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get a list of the public API keys of an app
     */
    async listAppPublicApiKeys(requestParameters: ListAppPublicApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPublicApiKeys> {
        const response = await this.listAppPublicApiKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get a list of apps
     */
    async listAppsRaw(requestParameters: ListAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListApps>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listApps().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAppsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read</code>.
     * Get a list of apps
     */
    async listApps(requestParameters: ListAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListApps> {
        const response = await this.listAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Update an app
     */
    async updateAppRaw(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateApp().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling updateApp().'
            );
        }

        if (requestParameters['updateAppRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAppRequest',
                'Required parameter "updateAppRequest" was null or undefined when calling updateApp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/apps/{app_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppRequestToJSON(requestParameters['updateAppRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:apps:read_write</code>.
     * Update an app
     */
    async updateApp(requestParameters: UpdateAppOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App> {
        const response = await this.updateAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
