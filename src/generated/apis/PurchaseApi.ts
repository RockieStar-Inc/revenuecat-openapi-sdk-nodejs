/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListEntitlements,
  ListPurchases,
  Purchase,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListEntitlementsFromJSON,
    ListEntitlementsToJSON,
    ListPurchasesFromJSON,
    ListPurchasesToJSON,
    PurchaseFromJSON,
    PurchaseToJSON,
} from '../models/index';

export interface GetPurchaseRequest {
    projectId: string;
    purchaseId: string;
}

export interface ListPurchaseEntitlementsRequest {
    projectId: string;
    purchaseId: string;
    startingAfter?: string;
    limit?: number;
}

export interface RefundPurchaseRequest {
    projectId: string;
    purchaseId: string;
}

export interface SearchPurchasesRequest {
    projectId: string;
    storePurchaseIdentifier: string;
}

/**
 * 
 */
export class PurchaseApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a purchase
     */
    async getPurchaseRaw(requestParameters: GetPurchaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getPurchase().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling getPurchase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/purchases/{purchase_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a purchase
     */
    async getPurchase(requestParameters: GetPurchaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.getPurchaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Entitlements granted by a Purchase.  This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of entitlements associated with a purchase
     */
    async listPurchaseEntitlementsRaw(requestParameters: ListPurchaseEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEntitlements>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listPurchaseEntitlements().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling listPurchaseEntitlements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/purchases/{purchase_id}/entitlements`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntitlementsFromJSON(jsonValue));
    }

    /**
     * Lists all Entitlements granted by a Purchase.  This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of entitlements associated with a purchase
     */
    async listPurchaseEntitlements(requestParameters: ListPurchaseEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEntitlements> {
        const response = await this.listPurchaseEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund a Web Billing purchase and revoke access to associated granted entitlements.  This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Refund a Web Billing purchase
     */
    async refundPurchaseRaw(requestParameters: RefundPurchaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Purchase>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling refundPurchase().'
            );
        }

        if (requestParameters['purchaseId'] == null) {
            throw new runtime.RequiredError(
                'purchaseId',
                'Required parameter "purchaseId" was null or undefined when calling refundPurchase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/purchases/{purchase_id}/actions/refund`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"purchase_id"}}`, encodeURIComponent(String(requestParameters['purchaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseFromJSON(jsonValue));
    }

    /**
     * Refund a Web Billing purchase and revoke access to associated granted entitlements.  This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Refund a Web Billing purchase
     */
    async refundPurchase(requestParameters: RefundPurchaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Purchase> {
        const response = await this.refundPurchaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for a one-time purchases by any of its associated `store_purchase_identifier` values.  For example, this may include the `transactionId` of any transaction in an Apple App Store purchase, or any order ID from a Google Play Store purchase.  This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Search one-time purchases by store purchase identifier
     */
    async searchPurchasesRaw(requestParameters: SearchPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPurchases>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling searchPurchases().'
            );
        }

        if (requestParameters['storePurchaseIdentifier'] == null) {
            throw new runtime.RequiredError(
                'storePurchaseIdentifier',
                'Required parameter "storePurchaseIdentifier" was null or undefined when calling searchPurchases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storePurchaseIdentifier'] != null) {
            queryParameters['store_purchase_identifier'] = requestParameters['storePurchaseIdentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/purchases`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPurchasesFromJSON(jsonValue));
    }

    /**
     * Search for a one-time purchases by any of its associated `store_purchase_identifier` values.  For example, this may include the `transactionId` of any transaction in an Apple App Store purchase, or any order ID from a Google Play Store purchase.  This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Search one-time purchases by store purchase identifier
     */
    async searchPurchases(requestParameters: SearchPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPurchases> {
        const response = await this.searchPurchasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
