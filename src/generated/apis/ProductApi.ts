/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductInStore201Response,
  CreateProductInStoreRequest,
  CreateProductRequest,
  DeletedObject,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListProducts,
  Product,
} from '../models/index';
import {
    CreateProductInStore201ResponseFromJSON,
    CreateProductInStore201ResponseToJSON,
    CreateProductInStoreRequestFromJSON,
    CreateProductInStoreRequestToJSON,
    CreateProductRequestFromJSON,
    CreateProductRequestToJSON,
    DeletedObjectFromJSON,
    DeletedObjectToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListProductsFromJSON,
    ListProductsToJSON,
    ProductFromJSON,
    ProductToJSON,
} from '../models/index';

export interface CreateProductOperationRequest {
    projectId: string;
    createProductRequest: CreateProductRequest;
}

export interface CreateProductInStoreOperationRequest {
    projectId: string;
    productId: string;
    createProductInStoreRequest?: CreateProductInStoreRequest;
}

export interface DeleteProductRequest {
    projectId: string;
    productId: string;
}

export interface GetProductRequest {
    projectId: string;
    productId: string;
    expand?: Array<GetProductExpandEnum>;
}

export interface ListProductsRequest {
    projectId: string;
    appId?: string;
    startingAfter?: string;
    limit?: number;
    expand?: Array<ListProductsExpandEnum>;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * <div class=\"theme-admonition theme-admonition-info alert alert--warning\">   <div class=\"heading\">Warning</div>   <div>This endpoint does not allow to create Web Billing products.</div> This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Create a product
     */
    async createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createProduct().'
            );
        }

        if (requestParameters['createProductRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductRequest',
                'Required parameter "createProductRequest" was null or undefined when calling createProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/products`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * <div class=\"theme-admonition theme-admonition-info alert alert--warning\">   <div class=\"heading\">Warning</div>   <div>This endpoint does not allow to create Web Billing products.</div> This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Create a product
     */
    async createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Push a product to the App Store.   **For subscription products**: You must provide store information including duration and subscription group details.  **For in-app purchase products** (consumable, non-consumable, non-renewing subscription): No request body is required.  This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Push a product to the store
     */
    async createProductInStoreRaw(requestParameters: CreateProductInStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProductInStore201Response>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createProductInStore().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling createProductInStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/products/{product_id}/create_in_store`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductInStoreRequestToJSON(requestParameters['createProductInStoreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProductInStore201ResponseFromJSON(jsonValue));
    }

    /**
     * Push a product to the App Store.   **For subscription products**: You must provide store information including duration and subscription group details.  **For in-app purchase products** (consumable, non-consumable, non-renewing subscription): No request body is required.  This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Push a product to the store
     */
    async createProductInStore(requestParameters: CreateProductInStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProductInStore201Response> {
        const response = await this.createProductInStoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Delete a product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedObject>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling deleteProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/products/{product_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedObjectFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read_write</code>.
     * Delete a product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedObject> {
        const response = await this.deleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
     * Get a product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getProduct().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/products/{product_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
     * Get a product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
     * Get a list of products
     */
    async listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProducts>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appId'] != null) {
            queryParameters['app_id'] = requestParameters['appId'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/products`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProductsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:products:read</code>.
     * Get a list of products
     */
    async listProducts(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProducts> {
        const response = await this.listProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProductExpandEnum = {
    App: 'app'
} as const;
export type GetProductExpandEnum = typeof GetProductExpandEnum[keyof typeof GetProductExpandEnum];
/**
 * @export
 */
export const ListProductsExpandEnum = {
    ItemsApp: 'items.app'
} as const;
export type ListProductsExpandEnum = typeof ListProductsExpandEnum[keyof typeof ListProductsExpandEnum];
