/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOfferingRequest,
  DeletedObject,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListOfferings,
  Offering,
  UpdateOfferingRequest,
} from '../models/index';
import {
    CreateOfferingRequestFromJSON,
    CreateOfferingRequestToJSON,
    DeletedObjectFromJSON,
    DeletedObjectToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListOfferingsFromJSON,
    ListOfferingsToJSON,
    OfferingFromJSON,
    OfferingToJSON,
    UpdateOfferingRequestFromJSON,
    UpdateOfferingRequestToJSON,
} from '../models/index';

export interface CreateOfferingOperationRequest {
    projectId: string;
    createOfferingRequest: CreateOfferingRequest;
}

export interface DeleteOfferingRequest {
    projectId: string;
    offeringId: string;
}

export interface GetOfferingRequest {
    projectId: string;
    offeringId: string;
    expand?: Array<GetOfferingExpandEnum>;
}

export interface ListOfferingsRequest {
    projectId: string;
    startingAfter?: string;
    limit?: number;
    expand?: Array<ListOfferingsExpandEnum>;
}

export interface UpdateOfferingOperationRequest {
    projectId: string;
    offeringId: string;
    updateOfferingRequest: UpdateOfferingRequest;
}

/**
 * 
 */
export class OfferingApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Create an offering
     */
    async createOfferingRaw(requestParameters: CreateOfferingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Offering>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createOffering().'
            );
        }

        if (requestParameters['createOfferingRequest'] == null) {
            throw new runtime.RequiredError(
                'createOfferingRequest',
                'Required parameter "createOfferingRequest" was null or undefined when calling createOffering().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/offerings`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOfferingRequestToJSON(requestParameters['createOfferingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferingFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Create an offering
     */
    async createOffering(requestParameters: CreateOfferingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Offering> {
        const response = await this.createOfferingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Delete an offering and its attached packages
     */
    async deleteOfferingRaw(requestParameters: DeleteOfferingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedObject>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteOffering().'
            );
        }

        if (requestParameters['offeringId'] == null) {
            throw new runtime.RequiredError(
                'offeringId',
                'Required parameter "offeringId" was null or undefined when calling deleteOffering().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/offerings/{offering_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"offering_id"}}`, encodeURIComponent(String(requestParameters['offeringId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedObjectFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Delete an offering and its attached packages
     */
    async deleteOffering(requestParameters: DeleteOfferingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedObject> {
        const response = await this.deleteOfferingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
     * Get an offering
     */
    async getOfferingRaw(requestParameters: GetOfferingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Offering>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getOffering().'
            );
        }

        if (requestParameters['offeringId'] == null) {
            throw new runtime.RequiredError(
                'offeringId',
                'Required parameter "offeringId" was null or undefined when calling getOffering().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/offerings/{offering_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"offering_id"}}`, encodeURIComponent(String(requestParameters['offeringId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferingFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
     * Get an offering
     */
    async getOffering(requestParameters: GetOfferingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Offering> {
        const response = await this.getOfferingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
     * Get a list of offerings
     */
    async listOfferingsRaw(requestParameters: ListOfferingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListOfferings>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listOfferings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/offerings`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListOfferingsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read</code>.
     * Get a list of offerings
     */
    async listOfferings(requestParameters: ListOfferingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListOfferings> {
        const response = await this.listOfferingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Update an offering
     */
    async updateOfferingRaw(requestParameters: UpdateOfferingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Offering>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateOffering().'
            );
        }

        if (requestParameters['offeringId'] == null) {
            throw new runtime.RequiredError(
                'offeringId',
                'Required parameter "offeringId" was null or undefined when calling updateOffering().'
            );
        }

        if (requestParameters['updateOfferingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOfferingRequest',
                'Required parameter "updateOfferingRequest" was null or undefined when calling updateOffering().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/offerings/{offering_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"offering_id"}}`, encodeURIComponent(String(requestParameters['offeringId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferingRequestToJSON(requestParameters['updateOfferingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferingFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Update an offering
     */
    async updateOffering(requestParameters: UpdateOfferingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Offering> {
        const response = await this.updateOfferingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOfferingExpandEnum = {
    Package: 'package',
    PackageProduct: 'package.product'
} as const;
export type GetOfferingExpandEnum = typeof GetOfferingExpandEnum[keyof typeof GetOfferingExpandEnum];
/**
 * @export
 */
export const ListOfferingsExpandEnum = {
    ItemsPackage: 'items.package',
    ItemsPackageProduct: 'items.package.product'
} as const;
export type ListOfferingsExpandEnum = typeof ListOfferingsExpandEnum[keyof typeof ListOfferingsExpandEnum];
