/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePaywallRequest,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  Paywall,
} from '../models/index';
import {
    CreatePaywallRequestFromJSON,
    CreatePaywallRequestToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    PaywallFromJSON,
    PaywallToJSON,
} from '../models/index';

export interface CreatePaywallOperationRequest {
    projectId: string;
    createPaywallRequest: CreatePaywallRequest;
}

/**
 * 
 */
export class PaywallApi extends runtime.BaseAPI {

    /**
     * Create a paywall for an offering of the project.  This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Create a paywall
     */
    async createPaywallRaw(requestParameters: CreatePaywallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Paywall>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createPaywall().'
            );
        }

        if (requestParameters['createPaywallRequest'] == null) {
            throw new runtime.RequiredError(
                'createPaywallRequest',
                'Required parameter "createPaywallRequest" was null or undefined when calling createPaywall().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/paywalls`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaywallRequestToJSON(requestParameters['createPaywallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaywallFromJSON(jsonValue));
    }

    /**
     * Create a paywall for an offering of the project.  This endpoint requires the following permission(s): <code>project_configuration:offerings:read_write</code>.
     * Create a paywall
     */
    async createPaywall(requestParameters: CreatePaywallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Paywall> {
        const response = await this.createPaywallRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
