/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerRequest,
  CreateVirtualCurrenciesTransactionRequest,
  Customer,
  DeletedObject,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListCustomerActiveEntitlements,
  ListCustomerAliases,
  ListCustomerAttributes,
  ListCustomers,
  ListPurchases,
  ListSubscriptions,
  ListVirtualCurrenciesBalances,
  SetCustomerAttributesRequest,
  Transfer,
  TransferCustomerDataRequest,
} from '../models/index';
import {
    CreateCustomerRequestFromJSON,
    CreateCustomerRequestToJSON,
    CreateVirtualCurrenciesTransactionRequestFromJSON,
    CreateVirtualCurrenciesTransactionRequestToJSON,
    CustomerFromJSON,
    CustomerToJSON,
    DeletedObjectFromJSON,
    DeletedObjectToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListCustomerActiveEntitlementsFromJSON,
    ListCustomerActiveEntitlementsToJSON,
    ListCustomerAliasesFromJSON,
    ListCustomerAliasesToJSON,
    ListCustomerAttributesFromJSON,
    ListCustomerAttributesToJSON,
    ListCustomersFromJSON,
    ListCustomersToJSON,
    ListPurchasesFromJSON,
    ListPurchasesToJSON,
    ListSubscriptionsFromJSON,
    ListSubscriptionsToJSON,
    ListVirtualCurrenciesBalancesFromJSON,
    ListVirtualCurrenciesBalancesToJSON,
    SetCustomerAttributesRequestFromJSON,
    SetCustomerAttributesRequestToJSON,
    TransferFromJSON,
    TransferToJSON,
    TransferCustomerDataRequestFromJSON,
    TransferCustomerDataRequestToJSON,
} from '../models/index';

export interface CreateCustomerOperationRequest {
    projectId: string;
    createCustomerRequest: CreateCustomerRequest;
}

export interface CreateVirtualCurrenciesTransactionOperationRequest {
    projectId: string;
    customerId: string;
    createVirtualCurrenciesTransactionRequest: CreateVirtualCurrenciesTransactionRequest;
    idempotencyKey?: string;
    includeEmptyBalances?: boolean;
}

export interface DeleteCustomerRequest {
    projectId: string;
    customerId: string;
}

export interface GetCustomerRequest {
    projectId: string;
    customerId: string;
    expand?: Array<GetCustomerExpandEnum>;
}

export interface ListCustomerActiveEntitlementsRequest {
    projectId: string;
    customerId: string;
    startingAfter?: string;
    limit?: number;
}

export interface ListCustomerAliasesRequest {
    projectId: string;
    customerId: string;
    startingAfter?: string;
    limit?: number;
}

export interface ListCustomerAttributesRequest {
    projectId: string;
    customerId: string;
    startingAfter?: string;
    limit?: number;
}

export interface ListCustomersRequest {
    projectId: string;
    startingAfter?: string;
    limit?: number;
    search?: string;
}

export interface ListPurchasesRequest {
    projectId: string;
    customerId: string;
    environment?: ListPurchasesEnvironmentEnum;
    startingAfter?: string;
    limit?: number;
}

export interface ListSubscriptionsRequest {
    projectId: string;
    customerId: string;
    environment?: ListSubscriptionsEnvironmentEnum;
    startingAfter?: string;
    limit?: number;
}

export interface ListVirtualCurrenciesBalancesRequest {
    projectId: string;
    customerId: string;
    includeEmptyBalances?: boolean;
    startingAfter?: string;
    limit?: number;
}

export interface SetCustomerAttributesOperationRequest {
    projectId: string;
    customerId: string;
    setCustomerAttributesRequest: SetCustomerAttributesRequest;
}

export interface TransferCustomerDataOperationRequest {
    projectId: string;
    customerId: string;
    transferCustomerDataRequest: TransferCustomerDataRequest;
}

export interface UpdateVirtualCurrenciesBalanceRequest {
    projectId: string;
    customerId: string;
    createVirtualCurrenciesTransactionRequest: CreateVirtualCurrenciesTransactionRequest;
    idempotencyKey?: string;
    includeEmptyBalances?: boolean;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Create a customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createCustomer().'
            );
        }

        if (requestParameters['createCustomerRequest'] == null) {
            throw new runtime.RequiredError(
                'createCustomerRequest',
                'Required parameter "createCustomerRequest" was null or undefined when calling createCustomer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerRequestToJSON(requestParameters['createCustomerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Create a customer
     */
    async createCustomer(requestParameters: CreateCustomerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.createCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Create a virtual currencies transaction
     */
    async createVirtualCurrenciesTransactionRaw(requestParameters: CreateVirtualCurrenciesTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVirtualCurrenciesBalances>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createVirtualCurrenciesTransaction().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling createVirtualCurrenciesTransaction().'
            );
        }

        if (requestParameters['createVirtualCurrenciesTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'createVirtualCurrenciesTransactionRequest',
                'Required parameter "createVirtualCurrenciesTransactionRequest" was null or undefined when calling createVirtualCurrenciesTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeEmptyBalances'] != null) {
            queryParameters['include_empty_balances'] = requestParameters['includeEmptyBalances'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['idempotencyKey'] != null) {
            headerParameters['Idempotency-Key'] = String(requestParameters['idempotencyKey']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/virtual_currencies/transactions`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVirtualCurrenciesTransactionRequestToJSON(requestParameters['createVirtualCurrenciesTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVirtualCurrenciesBalancesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Create a virtual currencies transaction
     */
    async createVirtualCurrenciesTransaction(requestParameters: CreateVirtualCurrenciesTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVirtualCurrenciesBalances> {
        const response = await this.createVirtualCurrenciesTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Delete a customer
     */
    async deleteCustomerRaw(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedObject>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCustomer().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling deleteCustomer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedObjectFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Delete a customer
     */
    async deleteCustomer(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedObject> {
        const response = await this.deleteCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a customer
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getCustomer().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling getCustomer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a customer
     */
    async getCustomer(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.getCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of customer\'s active entitlements
     */
    async listCustomerActiveEntitlementsRaw(requestParameters: ListCustomerActiveEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCustomerActiveEntitlements>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listCustomerActiveEntitlements().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listCustomerActiveEntitlements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/active_entitlements`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCustomerActiveEntitlementsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of customer\'s active entitlements
     */
    async listCustomerActiveEntitlements(requestParameters: ListCustomerActiveEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCustomerActiveEntitlements> {
        const response = await this.listCustomerActiveEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of the customer\'s aliases
     */
    async listCustomerAliasesRaw(requestParameters: ListCustomerAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCustomerAliases>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listCustomerAliases().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listCustomerAliases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/aliases`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCustomerAliasesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of the customer\'s aliases
     */
    async listCustomerAliases(requestParameters: ListCustomerAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCustomerAliases> {
        const response = await this.listCustomerAliasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of the customer\'s attributes
     */
    async listCustomerAttributesRaw(requestParameters: ListCustomerAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCustomerAttributes>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listCustomerAttributes().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listCustomerAttributes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/attributes`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCustomerAttributesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of the customer\'s attributes
     */
    async listCustomerAttributes(requestParameters: ListCustomerAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCustomerAttributes> {
        const response = await this.listCustomerAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of customers
     */
    async listCustomersRaw(requestParameters: ListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCustomers>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listCustomers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCustomersFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read</code>.
     * Get a list of customers
     */
    async listCustomers(requestParameters: ListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCustomers> {
        const response = await this.listCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of purchases associated with a customer
     */
    async listPurchasesRaw(requestParameters: ListPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPurchases>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listPurchases().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listPurchases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environment'] != null) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/purchases`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPurchasesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of purchases associated with a customer
     */
    async listPurchases(requestParameters: ListPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPurchases> {
        const response = await this.listPurchasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a list of subscriptions associated with a customer
     */
    async listSubscriptionsRaw(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSubscriptions>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listSubscriptions().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environment'] != null) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/subscriptions`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptionsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a list of subscriptions associated with a customer
     */
    async listSubscriptions(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSubscriptions> {
        const response = await this.listSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of customer\'s virtual currencies balances
     */
    async listVirtualCurrenciesBalancesRaw(requestParameters: ListVirtualCurrenciesBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVirtualCurrenciesBalances>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listVirtualCurrenciesBalances().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listVirtualCurrenciesBalances().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeEmptyBalances'] != null) {
            queryParameters['include_empty_balances'] = requestParameters['includeEmptyBalances'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/virtual_currencies`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVirtualCurrenciesBalancesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read</code>.
     * Get a list of customer\'s virtual currencies balances
     */
    async listVirtualCurrenciesBalances(requestParameters: ListVirtualCurrenciesBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVirtualCurrenciesBalances> {
        const response = await this.listVirtualCurrenciesBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Set a customer\'s attributes
     */
    async setCustomerAttributesRaw(requestParameters: SetCustomerAttributesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCustomerAttributes>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling setCustomerAttributes().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling setCustomerAttributes().'
            );
        }

        if (requestParameters['setCustomerAttributesRequest'] == null) {
            throw new runtime.RequiredError(
                'setCustomerAttributesRequest',
                'Required parameter "setCustomerAttributesRequest" was null or undefined when calling setCustomerAttributes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/attributes`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetCustomerAttributesRequestToJSON(requestParameters['setCustomerAttributesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCustomerAttributesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>.
     * Set a customer\'s attributes
     */
    async setCustomerAttributes(requestParameters: SetCustomerAttributesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCustomerAttributes> {
        const response = await this.setCustomerAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>, <code>customer_information:subscriptions:read_write</code>, <code>customer_information:purchases:read_write</code>.
     * Transfer customer\'s subscriptions and one-time purchases to another customer
     */
    async transferCustomerDataRaw(requestParameters: TransferCustomerDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transfer>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling transferCustomerData().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling transferCustomerData().'
            );
        }

        if (requestParameters['transferCustomerDataRequest'] == null) {
            throw new runtime.RequiredError(
                'transferCustomerDataRequest',
                'Required parameter "transferCustomerDataRequest" was null or undefined when calling transferCustomerData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/actions/transfer`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCustomerDataRequestToJSON(requestParameters['transferCustomerDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:customers:read_write</code>, <code>customer_information:subscriptions:read_write</code>, <code>customer_information:purchases:read_write</code>.
     * Transfer customer\'s subscriptions and one-time purchases to another customer
     */
    async transferCustomerData(requestParameters: TransferCustomerDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transfer> {
        const response = await this.transferCustomerDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Update a virtual currencies balance without creating a transaction
     */
    async updateVirtualCurrenciesBalanceRaw(requestParameters: UpdateVirtualCurrenciesBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVirtualCurrenciesBalances>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateVirtualCurrenciesBalance().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling updateVirtualCurrenciesBalance().'
            );
        }

        if (requestParameters['createVirtualCurrenciesTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'createVirtualCurrenciesTransactionRequest',
                'Required parameter "createVirtualCurrenciesTransactionRequest" was null or undefined when calling updateVirtualCurrenciesBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeEmptyBalances'] != null) {
            queryParameters['include_empty_balances'] = requestParameters['includeEmptyBalances'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['idempotencyKey'] != null) {
            headerParameters['Idempotency-Key'] = String(requestParameters['idempotencyKey']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/customers/{customer_id}/virtual_currencies/update_balance`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVirtualCurrenciesTransactionRequestToJSON(requestParameters['createVirtualCurrenciesTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVirtualCurrenciesBalancesFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:purchases:read_write</code>.
     * Update a virtual currencies balance without creating a transaction
     */
    async updateVirtualCurrenciesBalance(requestParameters: UpdateVirtualCurrenciesBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVirtualCurrenciesBalances> {
        const response = await this.updateVirtualCurrenciesBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCustomerExpandEnum = {
    Attributes: 'attributes'
} as const;
export type GetCustomerExpandEnum = typeof GetCustomerExpandEnum[keyof typeof GetCustomerExpandEnum];
/**
 * @export
 */
export const ListPurchasesEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
} as const;
export type ListPurchasesEnvironmentEnum = typeof ListPurchasesEnvironmentEnum[keyof typeof ListPurchasesEnvironmentEnum];
/**
 * @export
 */
export const ListSubscriptionsEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
} as const;
export type ListSubscriptionsEnvironmentEnum = typeof ListSubscriptionsEnvironmentEnum[keyof typeof ListSubscriptionsEnvironmentEnum];
