/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticatedManagementUrl,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject4,
  InlineObject5,
  InlineObject6,
  InlineObject7,
  InlineObject8,
  ListEntitlements,
  ListSubscriptionTransaction,
  ListSubscriptions,
  Subscription,
  SubscriptionTransaction,
} from '../models/index';
import {
    AuthenticatedManagementUrlFromJSON,
    AuthenticatedManagementUrlToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    ListEntitlementsFromJSON,
    ListEntitlementsToJSON,
    ListSubscriptionTransactionFromJSON,
    ListSubscriptionTransactionToJSON,
    ListSubscriptionsFromJSON,
    ListSubscriptionsToJSON,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionTransactionFromJSON,
    SubscriptionTransactionToJSON,
} from '../models/index';

export interface CancelSubscriptionRequest {
    projectId: string;
    subscriptionId: string;
}

export interface GetAuthorizedSubscriptionManagementUrlRequest {
    projectId: string;
    subscriptionId: string;
}

export interface GetPlayStoreSubscriptionTransactionsRequest {
    projectId: string;
    subscriptionId: string;
}

export interface GetSubscriptionRequest {
    projectId: string;
    subscriptionId: string;
}

export interface ListSubscriptionEntitlementsRequest {
    projectId: string;
    subscriptionId: string;
    startingAfter?: string;
    limit?: number;
}

export interface RefundPlayStoreSubscriptionTransactionRequest {
    projectId: string;
    subscriptionId: string;
    transactionId: string;
}

export interface RefundSubscriptionRequest {
    projectId: string;
    subscriptionId: string;
}

export interface SearchSubscriptionsRequest {
    projectId: string;
    storeSubscriptionIdentifier: string;
}

/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI {

    /**
     * Cancel an active Web Billing subscription. The customer will lose access to the associated entitlements at the end of the current period.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Cancel an active Web Billing subscription
     */
    async cancelSubscriptionRaw(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling cancelSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling cancelSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/actions/cancel`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Cancel an active Web Billing subscription. The customer will lose access to the associated entitlements at the end of the current period.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Cancel an active Web Billing subscription
     */
    async cancelSubscription(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.cancelSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a secure, single-use URL that allows customers to access their Web Billing customer portal.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get an authenticated Web Billing customer portal URL
     */
    async getAuthorizedSubscriptionManagementUrlRaw(requestParameters: GetAuthorizedSubscriptionManagementUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatedManagementUrl>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getAuthorizedSubscriptionManagementUrl().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getAuthorizedSubscriptionManagementUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/authenticated_management_url`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatedManagementUrlFromJSON(jsonValue));
    }

    /**
     * Get a secure, single-use URL that allows customers to access their Web Billing customer portal.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get an authenticated Web Billing customer portal URL
     */
    async getAuthorizedSubscriptionManagementUrl(requestParameters: GetAuthorizedSubscriptionManagementUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatedManagementUrl> {
        const response = await this.getAuthorizedSubscriptionManagementUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a Play Store subscription\'s transactions
     */
    async getPlayStoreSubscriptionTransactionsRaw(requestParameters: GetPlayStoreSubscriptionTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSubscriptionTransaction>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getPlayStoreSubscriptionTransactions().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getPlayStoreSubscriptionTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/transactions`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptionTransactionFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a Play Store subscription\'s transactions
     */
    async getPlayStoreSubscriptionTransactions(requestParameters: GetPlayStoreSubscriptionTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSubscriptionTransaction> {
        const response = await this.getPlayStoreSubscriptionTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a subscription
     */
    async getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a subscription
     */
    async getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all Entitlements granted by a Subscription.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a list of entitlements associated with a subscription
     */
    async listSubscriptionEntitlementsRaw(requestParameters: ListSubscriptionEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEntitlements>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listSubscriptionEntitlements().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling listSubscriptionEntitlements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/entitlements`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEntitlementsFromJSON(jsonValue));
    }

    /**
     * Lists all Entitlements granted by a Subscription.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Get a list of entitlements associated with a subscription
     */
    async listSubscriptionEntitlements(requestParameters: ListSubscriptionEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEntitlements> {
        const response = await this.listSubscriptionEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund a Play Store subscription\'s transaction. This endpoint does not cancel the subscription or revoke access to it.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Refund a Play Store subscription\'s transaction
     */
    async refundPlayStoreSubscriptionTransactionRaw(requestParameters: RefundPlayStoreSubscriptionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionTransaction>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling refundPlayStoreSubscriptionTransaction().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling refundPlayStoreSubscriptionTransaction().'
            );
        }

        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling refundPlayStoreSubscriptionTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/transactions/{transaction_id}/actions/refund`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));
        urlPath = urlPath.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters['transactionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionTransactionFromJSON(jsonValue));
    }

    /**
     * Refund a Play Store subscription\'s transaction. This endpoint does not cancel the subscription or revoke access to it.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Refund a Play Store subscription\'s transaction
     */
    async refundPlayStoreSubscriptionTransaction(requestParameters: RefundPlayStoreSubscriptionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionTransaction> {
        const response = await this.refundPlayStoreSubscriptionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a Web Billing subscription by refunding the most recent payment. The customer will immediately lose access to the associated entitlements.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Refund an active Web Billing subscription
     */
    async refundSubscriptionRaw(requestParameters: RefundSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling refundSubscription().'
            );
        }

        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling refundSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions/{subscription_id}/actions/refund`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"subscription_id"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Cancel a Web Billing subscription by refunding the most recent payment. The customer will immediately lose access to the associated entitlements.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read_write</code>.
     * Refund an active Web Billing subscription
     */
    async refundSubscription(requestParameters: RefundSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.refundSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for a subscription by any of its associated `store_subscription_identifier` values, whether from a past or current subscription period.  For example, this may include the `transactionId` of any transaction in an Apple App Store subscription, or any order ID from a Google Play Store subscription.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Search subscriptions by store subscription identifier
     */
    async searchSubscriptionsRaw(requestParameters: SearchSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSubscriptions>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling searchSubscriptions().'
            );
        }

        if (requestParameters['storeSubscriptionIdentifier'] == null) {
            throw new runtime.RequiredError(
                'storeSubscriptionIdentifier',
                'Required parameter "storeSubscriptionIdentifier" was null or undefined when calling searchSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storeSubscriptionIdentifier'] != null) {
            queryParameters['store_subscription_identifier'] = requestParameters['storeSubscriptionIdentifier'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/projects/{project_id}/subscriptions`;
        urlPath = urlPath.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptionsFromJSON(jsonValue));
    }

    /**
     * Search for a subscription by any of its associated `store_subscription_identifier` values, whether from a past or current subscription period.  For example, this may include the `transactionId` of any transaction in an Apple App Store subscription, or any order ID from a Google Play Store subscription.  This endpoint requires the following permission(s): <code>customer_information:subscriptions:read</code>.
     * Search subscriptions by store subscription identifier
     */
    async searchSubscriptions(requestParameters: SearchSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSubscriptions> {
        const response = await this.searchSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
