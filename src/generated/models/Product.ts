/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { App } from './App';
import {
    AppFromJSON,
    AppFromJSONTyped,
    AppToJSON,
    AppToJSONTyped,
} from './App';
import type { OneTimeProduct } from './OneTimeProduct';
import {
    OneTimeProductFromJSON,
    OneTimeProductFromJSONTyped,
    OneTimeProductToJSON,
    OneTimeProductToJSONTyped,
} from './OneTimeProduct';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
    ProductTypeToJSONTyped,
} from './ProductType';
import type { SubscriptionProduct } from './SubscriptionProduct';
import {
    SubscriptionProductFromJSON,
    SubscriptionProductFromJSONTyped,
    SubscriptionProductToJSON,
    SubscriptionProductToJSONTyped,
} from './SubscriptionProduct';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     * @type {string}
     * @memberof Product
     */
    object: ProductObjectEnum;
    /**
     * The id of the product
     * @type {string}
     * @memberof Product
     */
    id: string;
    /**
     * The store product identifier
     * @type {string}
     * @memberof Product
     */
    storeIdentifier: string;
    /**
     * 
     * @type {ProductType}
     * @memberof Product
     */
    type: ProductType;
    /**
     * 
     * @type {SubscriptionProduct}
     * @memberof Product
     */
    subscription?: SubscriptionProduct | null;
    /**
     * 
     * @type {OneTimeProduct}
     * @memberof Product
     */
    oneTime?: OneTimeProduct | null;
    /**
     * The date when the product was created in ms since epoch
     * @type {number}
     * @memberof Product
     */
    createdAt: number;
    /**
     * The id of the app
     * @type {string}
     * @memberof Product
     */
    appId: string;
    /**
     * 
     * @type {App}
     * @memberof Product
     */
    app?: App;
    /**
     * The display name of the product
     * @type {string}
     * @memberof Product
     */
    displayName: string | null;
}


/**
 * @export
 */
export const ProductObjectEnum = {
    Product: 'product'
} as const;
export type ProductObjectEnum = typeof ProductObjectEnum[keyof typeof ProductObjectEnum];


/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('storeIdentifier' in value) || value['storeIdentifier'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('appId' in value) || value['appId'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'id': json['id'],
        'storeIdentifier': json['store_identifier'],
        'type': ProductTypeFromJSON(json['type']),
        'subscription': json['subscription'] == null ? undefined : SubscriptionProductFromJSON(json['subscription']),
        'oneTime': json['one_time'] == null ? undefined : OneTimeProductFromJSON(json['one_time']),
        'createdAt': json['created_at'],
        'appId': json['app_id'],
        'app': json['app'] == null ? undefined : AppFromJSON(json['app']),
        'displayName': json['display_name'],
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Product | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'store_identifier': value['storeIdentifier'],
        'type': ProductTypeToJSON(value['type']),
        'subscription': SubscriptionProductToJSON(value['subscription']),
        'one_time': OneTimeProductToJSON(value['oneTime']),
        'created_at': value['createdAt'],
        'app_id': value['appId'],
        'app': AppToJSON(value['app']),
        'display_name': value['displayName'],
    };
}

