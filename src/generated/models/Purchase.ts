/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntitlementList } from './EntitlementList';
import {
    EntitlementListFromJSON,
    EntitlementListFromJSONTyped,
    EntitlementListToJSON,
    EntitlementListToJSONTyped,
} from './EntitlementList';
import type { Ownership } from './Ownership';
import {
    OwnershipFromJSON,
    OwnershipFromJSONTyped,
    OwnershipToJSON,
    OwnershipToJSONTyped,
} from './Ownership';
import type { MonetaryAmount } from './MonetaryAmount';
import {
    MonetaryAmountFromJSON,
    MonetaryAmountFromJSONTyped,
    MonetaryAmountToJSON,
    MonetaryAmountToJSONTyped,
} from './MonetaryAmount';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
    EnvironmentToJSONTyped,
} from './Environment';

/**
 * 
 * @export
 * @interface Purchase
 */
export interface Purchase {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof Purchase
     */
    object: PurchaseObjectEnum;
    /**
     * The id of the purchase
     * @type {string}
     * @memberof Purchase
     */
    id: string;
    /**
     * The id of the customer
     * @type {string}
     * @memberof Purchase
     */
    customerId: string;
    /**
     * The ID of the original customer
     * @type {string}
     * @memberof Purchase
     */
    originalCustomerId: string;
    /**
     * The ID of the product that was purchased
     * @type {string}
     * @memberof Purchase
     */
    productId: string;
    /**
     * The date when the purchase was made in ms since epoch
     * @type {number}
     * @memberof Purchase
     */
    purchasedAt: number;
    /**
     * 
     * @type {MonetaryAmount}
     * @memberof Purchase
     */
    revenueInUsd: MonetaryAmount;
    /**
     * The quantity of the product purchased in one transaction
     * @type {number}
     * @memberof Purchase
     */
    quantity: number;
    /**
     * The status of a purchase
     * @type {string}
     * @memberof Purchase
     */
    status: PurchaseStatusEnum;
    /**
     * The ID of the offering the customer saw when they did the purchase
     * @type {string}
     * @memberof Purchase
     */
    presentedOfferingId: string | null;
    /**
     * 
     * @type {EntitlementList}
     * @memberof Purchase
     */
    entitlements: EntitlementList;
    /**
     * 
     * @type {Environment}
     * @memberof Purchase
     */
    environment: Environment;
    /**
     * Store the purchase belongs to
     * @type {string}
     * @memberof Purchase
     */
    store: PurchaseStoreEnum;
    /**
     * The store purchase identifier
     * @type {string}
     * @memberof Purchase
     */
    storePurchaseIdentifier: string;
    /**
     * 
     * @type {Ownership}
     * @memberof Purchase
     */
    ownership: Ownership;
    /**
     * 
     * @type {Country}
     * @memberof Purchase
     */
    country?: Country | null;
}


/**
 * @export
 */
export const PurchaseObjectEnum = {
    Purchase: 'purchase'
} as const;
export type PurchaseObjectEnum = typeof PurchaseObjectEnum[keyof typeof PurchaseObjectEnum];

/**
 * @export
 */
export const PurchaseStatusEnum = {
    Owned: 'owned',
    Refunded: 'refunded'
} as const;
export type PurchaseStatusEnum = typeof PurchaseStatusEnum[keyof typeof PurchaseStatusEnum];

/**
 * @export
 */
export const PurchaseStoreEnum = {
    Amazon: 'amazon',
    AppStore: 'app_store',
    MacAppStore: 'mac_app_store',
    PlayStore: 'play_store',
    Promotional: 'promotional',
    Stripe: 'stripe',
    RcBilling: 'rc_billing'
} as const;
export type PurchaseStoreEnum = typeof PurchaseStoreEnum[keyof typeof PurchaseStoreEnum];


/**
 * Check if a given object implements the Purchase interface.
 */
export function instanceOfPurchase(value: object): value is Purchase {
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('customerId' in value) || value['customerId'] === undefined) return false;
    if (!('originalCustomerId' in value) || value['originalCustomerId'] === undefined) return false;
    if (!('productId' in value) || value['productId'] === undefined) return false;
    if (!('purchasedAt' in value) || value['purchasedAt'] === undefined) return false;
    if (!('revenueInUsd' in value) || value['revenueInUsd'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('presentedOfferingId' in value) || value['presentedOfferingId'] === undefined) return false;
    if (!('entitlements' in value) || value['entitlements'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('store' in value) || value['store'] === undefined) return false;
    if (!('storePurchaseIdentifier' in value) || value['storePurchaseIdentifier'] === undefined) return false;
    if (!('ownership' in value) || value['ownership'] === undefined) return false;
    return true;
}

export function PurchaseFromJSON(json: any): Purchase {
    return PurchaseFromJSONTyped(json, false);
}

export function PurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Purchase {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'id': json['id'],
        'customerId': json['customer_id'],
        'originalCustomerId': json['original_customer_id'],
        'productId': json['product_id'],
        'purchasedAt': json['purchased_at'],
        'revenueInUsd': MonetaryAmountFromJSON(json['revenue_in_usd']),
        'quantity': json['quantity'],
        'status': json['status'],
        'presentedOfferingId': json['presented_offering_id'],
        'entitlements': EntitlementListFromJSON(json['entitlements']),
        'environment': EnvironmentFromJSON(json['environment']),
        'store': json['store'],
        'storePurchaseIdentifier': json['store_purchase_identifier'],
        'ownership': OwnershipFromJSON(json['ownership']),
        'country': json['country'] == null ? undefined : CountryFromJSON(json['country']),
    };
}

export function PurchaseToJSON(json: any): Purchase {
    return PurchaseToJSONTyped(json, false);
}

export function PurchaseToJSONTyped(value?: Purchase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'customer_id': value['customerId'],
        'original_customer_id': value['originalCustomerId'],
        'product_id': value['productId'],
        'purchased_at': value['purchasedAt'],
        'revenue_in_usd': MonetaryAmountToJSON(value['revenueInUsd']),
        'quantity': value['quantity'],
        'status': value['status'],
        'presented_offering_id': value['presentedOfferingId'],
        'entitlements': EntitlementListToJSON(value['entitlements']),
        'environment': EnvironmentToJSON(value['environment']),
        'store': value['store'],
        'store_purchase_identifier': value['storePurchaseIdentifier'],
        'ownership': OwnershipToJSON(value['ownership']),
        'country': CountryToJSON(value['country']),
    };
}

