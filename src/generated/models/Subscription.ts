/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Ownership } from './Ownership';
import {
    OwnershipFromJSON,
    OwnershipFromJSONTyped,
    OwnershipToJSON,
    OwnershipToJSONTyped,
} from './Ownership';
import type { MonetaryAmount } from './MonetaryAmount';
import {
    MonetaryAmountFromJSON,
    MonetaryAmountFromJSONTyped,
    MonetaryAmountToJSON,
    MonetaryAmountToJSONTyped,
} from './MonetaryAmount';
import type { EntitlementList1 } from './EntitlementList1';
import {
    EntitlementList1FromJSON,
    EntitlementList1FromJSONTyped,
    EntitlementList1ToJSON,
    EntitlementList1ToJSONTyped,
} from './EntitlementList1';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
    CountryToJSONTyped,
} from './Country';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
    EnvironmentToJSONTyped,
} from './Environment';
import type { SubscriptionPendingChanges } from './SubscriptionPendingChanges';
import {
    SubscriptionPendingChangesFromJSON,
    SubscriptionPendingChangesFromJSONTyped,
    SubscriptionPendingChangesToJSON,
    SubscriptionPendingChangesToJSONTyped,
} from './SubscriptionPendingChanges';

/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof Subscription
     */
    object: SubscriptionObjectEnum;
    /**
     * The ID of the subscription (generated by RevenueCat)
     * @type {string}
     * @memberof Subscription
     */
    id: string;
    /**
     * The ID of the customer
     * @type {string}
     * @memberof Subscription
     */
    customerId: string;
    /**
     * The ID of the original customer. Relevant for subscriptions that were transferred from one customer to another
     * @type {string}
     * @memberof Subscription
     */
    originalCustomerId: string;
    /**
     * The RevenueCat ID of the product that the customer is subscribed to. Exists for all store types except for promotional.
     * @type {string}
     * @memberof Subscription
     */
    productId: string | null;
    /**
     * The date when the subscription originally started in ms since epoch
     * @type {number}
     * @memberof Subscription
     */
    startsAt: number;
    /**
     * The date when the subscription billing period started in ms since epoch
     * @type {number}
     * @memberof Subscription
     */
    currentPeriodStartsAt: number;
    /**
     * The date when the subscription billing period is expected to end in ms since epoch. Can be null if the subscription is paused until an indefinite date.
     * @type {number}
     * @memberof Subscription
     */
    currentPeriodEndsAt: number | null;
    /**
     * Determines whether the customer should currently be provided access to the entitlements associated with the subscription
     * @type {boolean}
     * @memberof Subscription
     */
    givesAccess: boolean;
    /**
     * Determines whether there is a pending payment associated with the subscription
     * @type {boolean}
     * @memberof Subscription
     */
    pendingPayment: boolean;
    /**
     * The auto renewal status of a subscription.<br><br>Possible values:<br>• `will_renew`: the subscription is currently set to automatically renew<br>• `will_not_renew`: the subscription is currently set to expire at the end of the period<br>• `will_change_product`: the subscription is currently set to change product at the end of the period (which might start a new subscription)<br>• `will_pause`: the subscription is currently set to pause at the end of the current period<br>• `requires_price_increase_consent`: the subscription will expire at the end of the current period unless the customer consents to the price increase<br>• `has_already_renewed`: the customer has already been charged for the upcoming renewal (so the renewal will take place even if the customer opts out of auto-renewal before the end of the period)
     * 
     * @type {string}
     * @memberof Subscription
     */
    autoRenewalStatus: SubscriptionAutoRenewalStatusEnum;
    /**
     * The status of a subscription. Please note that additional states might be added in the future. To determine whether or not a subscription currently provides access to any associated entitlements, use the _gives_access_ field.<br><br>Possible values:<br>• `trialing`: the subscription is in a free trial period<br>• `active`: the subscription is active, in a paid period<br>• `expired`: the subscription is expired and no longer active<br>• `in_grace_period`: the subscription is past its regular expiry date and experienced a billing issue, but is currently still in an access-granting grace period<br>• `in_billing_retry`: the subscription has experienced a billing issue. Billing is being retried, access is suspended.-paused: the subscription is currently paused and should not provide access.<br>• `unknown`: the subscription is in an unknown state. Refer to the _gives_access_ field to determine whether or not to grant access.<br>• `incomplete`: the subscription is in an incomplete state, maybe due to incorrect billing details or because it's scheduled to start in the future.
     * 
     * @type {string}
     * @memberof Subscription
     */
    status: SubscriptionStatusEnum;
    /**
     * 
     * @type {MonetaryAmount}
     * @memberof Subscription
     */
    totalRevenueInUsd: MonetaryAmount;
    /**
     * The ID of the offering the customer saw when purchasing the subscription
     * @type {string}
     * @memberof Subscription
     */
    presentedOfferingId: string | null;
    /**
     * 
     * @type {EntitlementList1}
     * @memberof Subscription
     */
    entitlements: EntitlementList1;
    /**
     * 
     * @type {Environment}
     * @memberof Subscription
     */
    environment: Environment;
    /**
     * Store the subscription belongs to
     * @type {string}
     * @memberof Subscription
     */
    store: SubscriptionStoreEnum;
    /**
     * The subscription identifier as per the store (e.g, for Apple App Store, the `transaction_id` of the latest transaction of the subscription, or for Google Play Store, the Order ID of the last renewal of the subscription)
     * @type {string}
     * @memberof Subscription
     */
    storeSubscriptionIdentifier: string;
    /**
     * 
     * @type {Ownership}
     * @memberof Subscription
     */
    ownership: Ownership;
    /**
     * 
     * @type {SubscriptionPendingChanges}
     * @memberof Subscription
     */
    pendingChanges?: SubscriptionPendingChanges | null;
    /**
     * 
     * @type {Country}
     * @memberof Subscription
     */
    country?: Country | null;
    /**
     * The URL to manage the subscription
     * @type {string}
     * @memberof Subscription
     */
    managementUrl: string | null;
}


/**
 * @export
 */
export const SubscriptionObjectEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionObjectEnum = typeof SubscriptionObjectEnum[keyof typeof SubscriptionObjectEnum];

/**
 * @export
 */
export const SubscriptionAutoRenewalStatusEnum = {
    WillRenew: 'will_renew',
    WillNotRenew: 'will_not_renew',
    WillChangeProduct: 'will_change_product',
    WillPause: 'will_pause',
    RequiresPriceIncreaseConsent: 'requires_price_increase_consent',
    HasAlreadyRenewed: 'has_already_renewed'
} as const;
export type SubscriptionAutoRenewalStatusEnum = typeof SubscriptionAutoRenewalStatusEnum[keyof typeof SubscriptionAutoRenewalStatusEnum];

/**
 * @export
 */
export const SubscriptionStatusEnum = {
    Trialing: 'trialing',
    Active: 'active',
    Expired: 'expired',
    InGracePeriod: 'in_grace_period',
    InBillingRetry: 'in_billing_retry',
    Paused: 'paused',
    Unknown: 'unknown',
    Incomplete: 'incomplete'
} as const;
export type SubscriptionStatusEnum = typeof SubscriptionStatusEnum[keyof typeof SubscriptionStatusEnum];

/**
 * @export
 */
export const SubscriptionStoreEnum = {
    Amazon: 'amazon',
    AppStore: 'app_store',
    MacAppStore: 'mac_app_store',
    PlayStore: 'play_store',
    Promotional: 'promotional',
    Stripe: 'stripe',
    RcBilling: 'rc_billing'
} as const;
export type SubscriptionStoreEnum = typeof SubscriptionStoreEnum[keyof typeof SubscriptionStoreEnum];


/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): value is Subscription {
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('customerId' in value) || value['customerId'] === undefined) return false;
    if (!('originalCustomerId' in value) || value['originalCustomerId'] === undefined) return false;
    if (!('productId' in value) || value['productId'] === undefined) return false;
    if (!('startsAt' in value) || value['startsAt'] === undefined) return false;
    if (!('currentPeriodStartsAt' in value) || value['currentPeriodStartsAt'] === undefined) return false;
    if (!('currentPeriodEndsAt' in value) || value['currentPeriodEndsAt'] === undefined) return false;
    if (!('givesAccess' in value) || value['givesAccess'] === undefined) return false;
    if (!('pendingPayment' in value) || value['pendingPayment'] === undefined) return false;
    if (!('autoRenewalStatus' in value) || value['autoRenewalStatus'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('totalRevenueInUsd' in value) || value['totalRevenueInUsd'] === undefined) return false;
    if (!('presentedOfferingId' in value) || value['presentedOfferingId'] === undefined) return false;
    if (!('entitlements' in value) || value['entitlements'] === undefined) return false;
    if (!('environment' in value) || value['environment'] === undefined) return false;
    if (!('store' in value) || value['store'] === undefined) return false;
    if (!('storeSubscriptionIdentifier' in value) || value['storeSubscriptionIdentifier'] === undefined) return false;
    if (!('ownership' in value) || value['ownership'] === undefined) return false;
    if (!('managementUrl' in value) || value['managementUrl'] === undefined) return false;
    return true;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'id': json['id'],
        'customerId': json['customer_id'],
        'originalCustomerId': json['original_customer_id'],
        'productId': json['product_id'],
        'startsAt': json['starts_at'],
        'currentPeriodStartsAt': json['current_period_starts_at'],
        'currentPeriodEndsAt': json['current_period_ends_at'],
        'givesAccess': json['gives_access'],
        'pendingPayment': json['pending_payment'],
        'autoRenewalStatus': json['auto_renewal_status'],
        'status': json['status'],
        'totalRevenueInUsd': MonetaryAmountFromJSON(json['total_revenue_in_usd']),
        'presentedOfferingId': json['presented_offering_id'],
        'entitlements': EntitlementList1FromJSON(json['entitlements']),
        'environment': EnvironmentFromJSON(json['environment']),
        'store': json['store'],
        'storeSubscriptionIdentifier': json['store_subscription_identifier'],
        'ownership': OwnershipFromJSON(json['ownership']),
        'pendingChanges': json['pending_changes'] == null ? undefined : SubscriptionPendingChangesFromJSON(json['pending_changes']),
        'country': json['country'] == null ? undefined : CountryFromJSON(json['country']),
        'managementUrl': json['management_url'],
    };
}

export function SubscriptionToJSON(json: any): Subscription {
    return SubscriptionToJSONTyped(json, false);
}

export function SubscriptionToJSONTyped(value?: Subscription | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'customer_id': value['customerId'],
        'original_customer_id': value['originalCustomerId'],
        'product_id': value['productId'],
        'starts_at': value['startsAt'],
        'current_period_starts_at': value['currentPeriodStartsAt'],
        'current_period_ends_at': value['currentPeriodEndsAt'],
        'gives_access': value['givesAccess'],
        'pending_payment': value['pendingPayment'],
        'auto_renewal_status': value['autoRenewalStatus'],
        'status': value['status'],
        'total_revenue_in_usd': MonetaryAmountToJSON(value['totalRevenueInUsd']),
        'presented_offering_id': value['presentedOfferingId'],
        'entitlements': EntitlementList1ToJSON(value['entitlements']),
        'environment': EnvironmentToJSON(value['environment']),
        'store': value['store'],
        'store_subscription_identifier': value['storeSubscriptionIdentifier'],
        'ownership': OwnershipToJSON(value['ownership']),
        'pending_changes': SubscriptionPendingChangesToJSON(value['pendingChanges']),
        'country': CountryToJSON(value['country']),
        'management_url': value['managementUrl'],
    };
}

