/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AmazonAppAmazon } from './AmazonAppAmazon';
import {
    AmazonAppAmazonFromJSON,
    AmazonAppAmazonFromJSONTyped,
    AmazonAppAmazonToJSON,
    AmazonAppAmazonToJSONTyped,
} from './AmazonAppAmazon';
import type { MacAppStoreAppMacAppStore } from './MacAppStoreAppMacAppStore';
import {
    MacAppStoreAppMacAppStoreFromJSON,
    MacAppStoreAppMacAppStoreFromJSONTyped,
    MacAppStoreAppMacAppStoreToJSON,
    MacAppStoreAppMacAppStoreToJSONTyped,
} from './MacAppStoreAppMacAppStore';
import type { RokuAppRoku } from './RokuAppRoku';
import {
    RokuAppRokuFromJSON,
    RokuAppRokuFromJSONTyped,
    RokuAppRokuToJSON,
    RokuAppRokuToJSONTyped,
} from './RokuAppRoku';
import type { AppStoreAppAppStore } from './AppStoreAppAppStore';
import {
    AppStoreAppAppStoreFromJSON,
    AppStoreAppAppStoreFromJSONTyped,
    AppStoreAppAppStoreToJSON,
    AppStoreAppAppStoreToJSONTyped,
} from './AppStoreAppAppStore';
import type { RCBillingAppRcBilling } from './RCBillingAppRcBilling';
import {
    RCBillingAppRcBillingFromJSON,
    RCBillingAppRcBillingFromJSONTyped,
    RCBillingAppRcBillingToJSON,
    RCBillingAppRcBillingToJSONTyped,
} from './RCBillingAppRcBilling';
import type { StripeAppStripe } from './StripeAppStripe';
import {
    StripeAppStripeFromJSON,
    StripeAppStripeFromJSONTyped,
    StripeAppStripeToJSON,
    StripeAppStripeToJSONTyped,
} from './StripeAppStripe';
import type { PaddleAppPaddle } from './PaddleAppPaddle';
import {
    PaddleAppPaddleFromJSON,
    PaddleAppPaddleFromJSONTyped,
    PaddleAppPaddleToJSON,
    PaddleAppPaddleToJSONTyped,
} from './PaddleAppPaddle';
import type { PlayStoreAppPlayStore } from './PlayStoreAppPlayStore';
import {
    PlayStoreAppPlayStoreFromJSON,
    PlayStoreAppPlayStoreFromJSONTyped,
    PlayStoreAppPlayStoreToJSON,
    PlayStoreAppPlayStoreToJSONTyped,
} from './PlayStoreAppPlayStore';

/**
 * 
 * @export
 * @interface App
 */
export interface App {
    /**
     * 
     * @type {AmazonAppAmazon}
     * @memberof App
     */
    amazon?: AmazonAppAmazon;
    /**
     * 
     * @type {AppStoreAppAppStore}
     * @memberof App
     */
    appStore?: AppStoreAppAppStore;
    /**
     * 
     * @type {MacAppStoreAppMacAppStore}
     * @memberof App
     */
    macAppStore?: MacAppStoreAppMacAppStore;
    /**
     * 
     * @type {PlayStoreAppPlayStore}
     * @memberof App
     */
    playStore?: PlayStoreAppPlayStore;
    /**
     * 
     * @type {StripeAppStripe}
     * @memberof App
     */
    stripe?: StripeAppStripe;
    /**
     * 
     * @type {RCBillingAppRcBilling}
     * @memberof App
     */
    rcBilling?: RCBillingAppRcBilling;
    /**
     * 
     * @type {RokuAppRoku}
     * @memberof App
     */
    roku?: RokuAppRoku;
    /**
     * 
     * @type {PaddleAppPaddle}
     * @memberof App
     */
    paddle?: PaddleAppPaddle;
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof App
     */
    object: AppObjectEnum;
    /**
     * The id of the app
     * @type {string}
     * @memberof App
     */
    id: string;
    /**
     * The name of the app
     * @type {string}
     * @memberof App
     */
    name: string;
    /**
     * The date when the app was created in ms since epoch
     * @type {number}
     * @memberof App
     */
    createdAt: number;
    /**
     * The platform of the app
     * @type {string}
     * @memberof App
     */
    type: AppTypeEnum;
    /**
     * The id of the project
     * @type {string}
     * @memberof App
     */
    projectId: string;
}


/**
 * @export
 */
export const AppObjectEnum = {
    App: 'app'
} as const;
export type AppObjectEnum = typeof AppObjectEnum[keyof typeof AppObjectEnum];

/**
 * @export
 */
export const AppTypeEnum = {
    Amazon: 'amazon',
    AppStore: 'app_store',
    MacAppStore: 'mac_app_store',
    PlayStore: 'play_store',
    Stripe: 'stripe',
    RcBilling: 'rc_billing',
    Roku: 'roku',
    Paddle: 'paddle'
} as const;
export type AppTypeEnum = typeof AppTypeEnum[keyof typeof AppTypeEnum];


/**
 * Check if a given object implements the App interface.
 */
export function instanceOfApp(value: object): value is App {
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    return true;
}

export function AppFromJSON(json: any): App {
    return AppFromJSONTyped(json, false);
}

export function AppFromJSONTyped(json: any, ignoreDiscriminator: boolean): App {
    if (json == null) {
        return json;
    }
    return {
        
        'amazon': json['amazon'] == null ? undefined : AmazonAppAmazonFromJSON(json['amazon']),
        'appStore': json['app_store'] == null ? undefined : AppStoreAppAppStoreFromJSON(json['app_store']),
        'macAppStore': json['mac_app_store'] == null ? undefined : MacAppStoreAppMacAppStoreFromJSON(json['mac_app_store']),
        'playStore': json['play_store'] == null ? undefined : PlayStoreAppPlayStoreFromJSON(json['play_store']),
        'stripe': json['stripe'] == null ? undefined : StripeAppStripeFromJSON(json['stripe']),
        'rcBilling': json['rc_billing'] == null ? undefined : RCBillingAppRcBillingFromJSON(json['rc_billing']),
        'roku': json['roku'] == null ? undefined : RokuAppRokuFromJSON(json['roku']),
        'paddle': json['paddle'] == null ? undefined : PaddleAppPaddleFromJSON(json['paddle']),
        'object': json['object'],
        'id': json['id'],
        'name': json['name'],
        'createdAt': json['created_at'],
        'type': json['type'],
        'projectId': json['project_id'],
    };
}

export function AppToJSON(json: any): App {
    return AppToJSONTyped(json, false);
}

export function AppToJSONTyped(value?: App | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'amazon': AmazonAppAmazonToJSON(value['amazon']),
        'app_store': AppStoreAppAppStoreToJSON(value['appStore']),
        'mac_app_store': MacAppStoreAppMacAppStoreToJSON(value['macAppStore']),
        'play_store': PlayStoreAppPlayStoreToJSON(value['playStore']),
        'stripe': StripeAppStripeToJSON(value['stripe']),
        'rc_billing': RCBillingAppRcBillingToJSON(value['rcBilling']),
        'roku': RokuAppRokuToJSON(value['roku']),
        'paddle': PaddleAppPaddleToJSON(value['paddle']),
        'object': value['object'],
        'id': value['id'],
        'name': value['name'],
        'created_at': value['createdAt'],
        'type': value['type'],
        'project_id': value['projectId'],
    };
}

